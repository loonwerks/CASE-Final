package SW
public
	with Data_Model;
	with Base_Types;

-- This is the structure to hold the lat/long/alt values of a coordinate
	data Coordinate
	end Coordinate;

	data implementation Coordinate.Impl
		subcomponents
			lat: data Base_Types::Integer_32;
			longitude: data Base_Types::Integer_32;
			alt: data Base_Types::Integer_32;
	end Coordinate.Impl;

-- The Map is a structure that contains a list of coordinates that encircle a
-- region.  
-- In this implementation, we fix the size of the map to 4 waypoints
	data Map
		-- The Map is a structure that contains a list of coordinates that encircle a
		-- region.  
		-- In this implementation, we fix the size of the map to 4 waypoints
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (4);
	end Map;

-- The Flight Pattern is an enumeration that defines how the UAV will fly through the
-- sensing region to conduct surveillance.
	data FlightPattern
		-- The Flight Pattern is an enumeration that defines how the UAV will fly through the
		-- sensing region to conduct surveillance.
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("ZigZag", "StraightLine", "Perimeter");
	end FlightPattern;

-- The Command structure contains data that the Ground Station passes to the UAV.
-- It contains a Map, Flight Pattern and Authentication bit.
	data Command
	end Command;

	data implementation Command.Impl
		subcomponents
			Map: data Map;
			Pattern: data FlightPattern;
			HMAC: data Base_Types::Boolean;
	end Command.Impl;

-- The Mission is a list of waypoints that is generated by the Flight Planner based on a
-- Map and Flight Pattern.
-- For this implementation, we fix the size of the Mission to 10 waypoints.
	data Mission
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (10);
	end Mission;

-- The Mission Window is a list of waypoints that the Waypoint Manager assembles from the Mission.
-- For this implementation, we fix the size of the Mission Window to 4 waypoints.
	data MissionWindow
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (4);
	end MissionWindow;

	data UART_Buffer
	end UART_Buffer;

	thread RadioDriver
		features
			recv_map_out: out event data port Command.Impl;
		properties
			Source_Text => ("behavior/radiodriver.c");
			Dispatch_Protocol => Sporadic;
			Initialize_Entrypoint_Source_Text => "init";
	end RadioDriver;

	thread implementation RadioDriver.Impl
	end RadioDriver.Impl;

	thread FlightPlanner
		features
			-- mission_new: out event data port Base_Types::Boolean;
			flight_plan: out event data port Mission;
			mission_rcv: in event data port Base_Types::Boolean {
				Compute_Entrypoint_Source_Text => "mission_rcv";
			};
			recv_map: in event data port Command.Impl {
				Compute_Entrypoint_Source_Text => "recv_map";
			};
		properties
			Source_Text => ("behavior/flightplanner.c");
			Dispatch_Protocol => Sporadic;
			Initialize_Entrypoint_Source_Text => "init";
	end FlightPlanner;

	thread implementation FlightPlanner.Impl
	end FlightPlanner.Impl;

	thread WaypointManager
		features
			flight_plan: in event data port Mission {
				Compute_Entrypoint_Source_Text => "flight_plan";
			};
			mission_rcv: out event data port Base_Types::Boolean;
			mission_window: out event data port MissionWindow;
			tracking_id: in event data port Base_Types::Integer_64 {
				Compute_Entrypoint_Source_Text => "tracking_id";
			};
		properties
			Source_Text => ("behavior/waypointmanager.c");
			Dispatch_Protocol => Sporadic;
			Initialize_Entrypoint_Source_Text => "init";
	end WaypointManager;

	thread implementation WaypointManager.Impl
	end WaypointManager.Impl;

	thread UARTDriver
		features
			mission_window: in event data port MissionWindow {
				Compute_Entrypoint_Source_Text => "mission_window";
			};
			tracking_id: out event data port Base_Types::Integer_64;
		properties
			Source_Text => ("behavior/uartdriver.c");
			Dispatch_Protocol => Sporadic;
			Initialize_Entrypoint_Source_Text => "init";
	end UARTDriver;

	thread implementation UARTDriver.Impl
	end UARTDriver.Impl;

	process MC_SW
	end MC_SW;

	process implementation MC_SW.Impl
		subcomponents
			RADIO: thread RadioDriver.Impl;
			FPLN: thread FlightPlanner.Impl;
			WPM: thread WaypointManager.Impl;
			UART: thread UARTDriver.Impl;
		connections
			c1: port FPLN.flight_plan -> WPM.flight_plan;
			c2: port WPM.mission_rcv -> FPLN.mission_rcv;
			c3: port RADIO.recv_map_out -> FPLN.recv_map;
			c6: port WPM.mission_window -> UART.mission_window;
			c7: port UART.tracking_id -> WPM.tracking_id;
	end MC_SW.Impl;
end SW;